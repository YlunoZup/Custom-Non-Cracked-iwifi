/*!
 * Bootstrap-select v1.13.9 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2019 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
 */

!function (e, t) {
    if (undefined === e && undefined !== window) {
        e = window;
    }
    if ("function" == typeof define && define.amd) {
        define(["jquery"], function (e) {
            return t(e);
        });
    } else if ("object" == typeof module && module.exports) {
        module.exports = t(require("jquery"));
    } else {
        t(e.jQuery);
    }
}(this, function (e) {
    !function (z) {
        "use strict";

        var d = ["sanitize", "whiteList", "sanitizeFn"];
        var l = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"];
        var e = {
            "*": ["class", "dir", "id", "lang", "role", "tabindex", "style", /^aria-[\w-]*$/i],
            a: ["target", "href", "title", "rel"],
            area: [],
            b: [],
            br: [],
            col: [],
            code: [],
            div: [],
            em: [],
            hr: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            i: [],
            img: ["src", "alt", "title", "width", "height"],
            li: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            u: [],
            ul: []
        };
        function v(e, t) {
            var i = e.nodeName.toLowerCase();
            if (-1 !== z.inArray(i, t)) {
                return -1 === z.inArray(i, l) || Boolean(e.nodeValue.match(/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi) || e.nodeValue.match(/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i));
            }
            var s = z(t).filter(function (e, t) {
                return t instanceof RegExp;
            });
            var n = 0;
            for (var o = s.length; n < o; n++) {
                if (i.match(s[n])) {
                    return true;
                }
            }
            return false;
        }
        function B(e, t, i) {
            if (i && "function" == typeof i) {
                return i(e);
            }
            var s = Object.keys(t);
            var n = 0;
            for (var o = e.length; n < o; n++) {
                var l = e[n].querySelectorAll("*");
                var r = 0;
                for (var a = l.length; r < a; r++) {
                    var c = l[r];
                    var d = c.nodeName.toLowerCase();
                    if (-1 !== s.indexOf(d)) {
                        var h = [].slice.call(c.attributes);
                        var p = [].concat(t["*"] || [], t[d] || []);
                        var u = 0;
                        for (var f = h.length; u < f; u++) {
                            var m = h[u];
                            if (!v(m, p)) {
                                c.removeAttribute(m.nodeName);
                            }
                        }
                    } else {
                        c.parentNode.removeChild(c);
                    }
                }
            }
        }
        if (!("classList" in document.createElement("_"))) {
            (function (e) {
                if ("Element" in e) {
                    var s = e.Element.prototype;
                    var o = function () {
                        var i = z(this);
                        return {
                            add: function (e) {
                                e = Array.prototype.slice.call(arguments).join(" ");
                                return i.addClass(e);
                            },
                            remove: function (e) {
                                e = Array.prototype.slice.call(arguments).join(" ");
                                return i.removeClass(e);
                            },
                            toggle: function (e, t) {
                                return i.toggleClass(e, t);
                            },
                            contains: function (e) {
                                return i.hasClass(e);
                            }
                        };
                    };
                    if (Object.defineProperty) {
                        var l = {
                            get: o,
                            enumerable: true,
                            configurable: true
                        };
                        try {
                            Object.defineProperty(s, "classList", l);
                        } catch (e) {
                            if (!(undefined !== e.number && -2146823252 !== e.number)) {
                                l.enumerable = false;
                                Object.defineProperty(s, "classList", l);
                            }
                        }
                    } else if (Object.prototype.__defineGetter__) {
                        s.__defineGetter__("classList", o);
                    }
                }
            })(window);
        }
        var t;
        var c;
        var i;
        var s = document.createElement("_");
        s.classList.add("c1", "c2");
        if (!s.classList.contains("c2")) {
            var n = DOMTokenList.prototype.add;
            var o = DOMTokenList.prototype.remove;
            DOMTokenList.prototype.add = function () {
                Array.prototype.forEach.call(arguments, n.bind(this));
            };
            DOMTokenList.prototype.remove = function () {
                Array.prototype.forEach.call(arguments, o.bind(this));
            };
        }
        s.classList.toggle("c3", false);
        if (s.classList.contains("c3")) {
            var h = DOMTokenList.prototype.toggle;
            DOMTokenList.prototype.toggle = function (e, t) {
                return 1 in arguments && !this.contains(e) == !t ? t : h.call(this, e);
            };
        }
        function E(e) {
            var t;
            var i = [];
            var s = e.selectedOptions;
            if (e.multiple) {
                var n = 0;
                for (var o = s.length; n < o; n++) {
                    t = s[n];
                    i.push(t.value || t.text);
                }
            } else {
                i = e.value;
            }
            return i;
        }
        s = null;
        if (!String.prototype.startsWith) {
            t = function () {
                try {
                    var e = {};
                    var t = Object.defineProperty;
                    var i = t(e, e, e) && t;
                } catch (e) { }
                return i;
            }();
            c = {}.toString;
            i = function (e) {
                if (null == this) {
                    throw new TypeError();
                }
                var t = String(this);
                if (e && "[object RegExp]" == c.call(e)) {
                    throw new TypeError();
                }
                var i = t.length;
                var s = String(e);
                var n = s.length;
                var o = 1 < arguments.length ? arguments[1] : undefined;
                var l = o ? Number(o) : 0;
                if (l != l) {
                    l = 0;
                }
                var r = Math.min(Math.max(l, 0), i);
                if (i < n + r) {
                    return false;
                }
                for (var a = -1; ++a < n;) {
                    if (t.charCodeAt(r + a) != s.charCodeAt(a)) {
                        return false;
                    }
                }
                return true;
            };
            if (t) {
                t(String.prototype, "startsWith", {
                    value: i,
                    configurable: true,
                    writable: true
                });
            } else {
                String.prototype.startsWith = i;
            }
        }
        if (!Object.keys) {
            Object.keys = function (e, t, i) {
                i = [];
                for (t in e) if (i.hasOwnProperty.call(e, t)) {
                    i.push(t);
                }
                return i;
            };
        }
        if (HTMLSelectElement && !HTMLSelectElement.prototype.hasOwnProperty("selectedOptions")) {
            Object.defineProperty(HTMLSelectElement.prototype, "selectedOptions", {
                get: function () {
                    return this.querySelectorAll(":checked");
                }
            });
        }
        var p = {
            useDefault: false,
            _set: z.valHooks.select.set
        };
        z.valHooks.select.set = function (e, t) {
            if (t && true) {
                z(e).data("selected", true);
            }
            return p._set.apply(this, arguments);
        };
        var C = null;
        var u = function () {
            try {
                new Event("change");
                return true;
            } catch (e) {
                return false;
            }
        }();
        function $(e, t, i, s) {
            var n = ["display", "subtext", "tokens"];
            var o = false;
            for (var l = 0; l < n.length; l++) {
                var r = n[l];
                var a = e[r];
                if (a && (a = a.toString(), "display" === r && (a = a.replace(/<[^>]+>/g, "")), s && (a = w(a)), a = a.toUpperCase(), o = "contains" === i ? 0 <= a.indexOf(t) : a.startsWith(t))) {
                    break;
                }
            }
            return o;
        }
        z.fn.triggerNative = function (e) {
            var t;
            var i = this[0];
            if (i.dispatchEvent) {
                if (u) {
                    t = new Event(e, {
                        bubbles: true
                    });
                } else {
                    (t = document.createEvent("Event")).initEvent(e, true, false);
                }
                i.dispatchEvent(t);
            } else if (i.fireEvent) {
                (t = document.createEventObject()).eventType = e;
                i.fireEvent("on" + e, t);
            } else {
                this.trigger(e);
            }
        };
        var f = {
            "À": "A",
            "Á": "A",
            "Â": "A",
            "Ã": "A",
            "Ä": "A",
            "Å": "A",
            "à": "a",
            "á": "a",
            "â": "a",
            "ã": "a",
            "ä": "a",
            "å": "a",
            "Ç": "C",
            "ç": "c",
            "Ð": "D",
            "ð": "d",
            "È": "E",
            "É": "E",
            "Ê": "E",
            "Ë": "E",
            "è": "e",
            "é": "e",
            "ê": "e",
            "ë": "e",
            "Ì": "I",
            "Í": "I",
            "Î": "I",
            "Ï": "I",
            "ì": "i",
            "í": "i",
            "î": "i",
            "ï": "i",
            "Ñ": "N",
            "ñ": "n",
            "Ò": "O",
            "Ó": "O",
            "Ô": "O",
            "Õ": "O",
            "Ö": "O",
            "Ø": "O",
            "ò": "o",
            "ó": "o",
            "ô": "o",
            "õ": "o",
            "ö": "o",
            "ø": "o",
            "Ù": "U",
            "Ú": "U",
            "Û": "U",
            "Ü": "U",
            "ù": "u",
            "ú": "u",
            "û": "u",
            "ü": "u",
            "Ý": "Y",
            "ý": "y",
            "ÿ": "y",
            "Æ": "Ae",
            "æ": "ae",
            "Þ": "Th",
            "þ": "th",
            "ß": "ss",
            "Ā": "A",
            "Ă": "A",
            "Ą": "A",
            "ā": "a",
            "ă": "a",
            "ą": "a",
            "Ć": "C",
            "Ĉ": "C",
            "Ċ": "C",
            "Č": "C",
            "ć": "c",
            "ĉ": "c",
            "ċ": "c",
            "č": "c",
            "Ď": "D",
            "Đ": "D",
            "ď": "d",
            "đ": "d",
            "Ē": "E",
            "Ĕ": "E",
            "Ė": "E",
            "Ę": "E",
            "Ě": "E",
            "ē": "e",
            "ĕ": "e",
            "ė": "e",
            "ę": "e",
            "ě": "e",
            "Ĝ": "G",
            "Ğ": "G",
            "Ġ": "G",
            "Ģ": "G",
            "ĝ": "g",
            "ğ": "g",
            "ġ": "g",
            "ģ": "g",
            "Ĥ": "H",
            "Ħ": "H",
            "ĥ": "h",
            "ħ": "h",
            "Ĩ": "I",
            "Ī": "I",
            "Ĭ": "I",
            "Į": "I",
            "İ": "I",
            "ĩ": "i",
            "ī": "i",
            "ĭ": "i",
            "į": "i",
            "ı": "i",
            "Ĵ": "J",
            "ĵ": "j",
            "Ķ": "K",
            "ķ": "k",
            "ĸ": "k",
            "Ĺ": "L",
            "Ļ": "L",
            "Ľ": "L",
            "Ŀ": "L",
            "Ł": "L",
            "ĺ": "l",
            "ļ": "l",
            "ľ": "l",
            "ŀ": "l",
            "ł": "l",
            "Ń": "N",
            "Ņ": "N",
            "Ň": "N",
            "Ŋ": "N",
            "ń": "n",
            "ņ": "n",
            "ň": "n",
            "ŋ": "n",
            "Ō": "O",
            "Ŏ": "O",
            "Ő": "O",
            "ō": "o",
            "ŏ": "o",
            "ő": "o",
            "Ŕ": "R",
            "Ŗ": "R",
            "Ř": "R",
            "ŕ": "r",
            "ŗ": "r",
            "ř": "r",
            "Ś": "S",
            "Ŝ": "S",
            "Ş": "S",
            "Š": "S",
            "ś": "s",
            "ŝ": "s",
            "ş": "s",
            "š": "s",
            "Ţ": "T",
            "Ť": "T",
            "Ŧ": "T",
            "ţ": "t",
            "ť": "t",
            "ŧ": "t",
            "Ũ": "U",
            "Ū": "U",
            "Ŭ": "U",
            "Ů": "U",
            "Ű": "U",
            "Ų": "U",
            "ũ": "u",
            "ū": "u",
            "ŭ": "u",
            "ů": "u",
            "ű": "u",
            "ų": "u",
            "Ŵ": "W",
            "ŵ": "w",
            "Ŷ": "Y",
            "ŷ": "y",
            "Ÿ": "Y",
            "Ź": "Z",
            "Ż": "Z",
            "Ž": "Z",
            "ź": "z",
            "ż": "z",
            "ž": "z",
            "Ĳ": "IJ",
            "ĳ": "ij",
            "Œ": "Oe",
            "œ": "oe",
            "ŉ": "'n",
            "ſ": "s"
        };
        var g = RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\u1ab0-\\u1aff\\u1dc0-\\u1dff]", "g");
        function b(e) {
            return f[e];
        }
        function w(e) {
            return (e = e.toString()) && e.replace(/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, b).replace(g, "");
        }
        var x;
        var I;
        var k;
        var y;
        var S;
        x = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            "\"": "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
        };
        I = function (e) {
            return x[e];
        };
        k = "(?:" + Object.keys(x).join("|") + ")";
        y = RegExp(k);
        S = RegExp(k, "g");
        var O = function (e) {
            e = null == e ? "" : "" + e;
            return y.test(e) ? e.replace(S, I) : e;
        };
        var T = {
            32: " ",
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            59: ";",
            65: "A",
            66: "B",
            67: "C",
            68: "D",
            69: "E",
            70: "F",
            71: "G",
            72: "H",
            73: "I",
            74: "J",
            75: "K",
            76: "L",
            77: "M",
            78: "N",
            79: "O",
            80: "P",
            81: "Q",
            82: "R",
            83: "S",
            84: "T",
            85: "U",
            86: "V",
            87: "W",
            88: "X",
            89: "Y",
            90: "Z",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9"
        };
        var M = {
            success: false,
            major: "3"
        };
        try {
            M.full = (z.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split(".");
            M.major = M.full[0];
            M.success = true;
        } catch (e) { }
        var R = 0;
        var F = {
            span: document.createElement("span"),
            i: document.createElement("i"),
            subtext: document.createElement("small"),
            a: document.createElement("a"),
            li: document.createElement("li"),
            whitespace: document.createTextNode(" "),
            fragment: document.createDocumentFragment()
        };
        F.a.setAttribute("role", "option");
        F.subtext.className = "text-muted";
        F.text = F.span.cloneNode(false);
        F.text.className = "text";
        F.checkMark = F.span.cloneNode(false);
        var _ = new RegExp("38|40");
        var q = new RegExp("^9$|27");
        var G = function (e, t, i) {
            var s = F.li.cloneNode(false);
            if (e) {
                if (1 === e.nodeType || 11 === e.nodeType) {
                    s.appendChild(e);
                } else {
                    s.innerHTML = e;
                }
            }
            if (undefined !== t && "" !== t) {
                s.className = t;
            }
            if (null != i) {
                s.classList.add("optgroup-" + i);
            }
            return s;
        };
        var K = function (e, t, i) {
            var s = F.a.cloneNode(true);
            if (e) {
                if (11 === e.nodeType) {
                    s.appendChild(e);
                } else {
                    s.insertAdjacentHTML("beforeend", e);
                }
            }
            if (undefined !== t && "" !== t) {
                s.className = t;
            }
            if (i) {
                s.setAttribute("style", i);
            }
            return s;
        };
        var Y = function (e, t) {
            var i;
            var s;
            var n = F.text.cloneNode(false);
            if (e.content) {
                n.innerHTML = e.content;
            } else {
                n.textContent = e.text;
                if (e.icon) {
                    var o = F.whitespace.cloneNode(false);
                    (s = (true === t ? F.i : F.span).cloneNode(false)).className = e.iconBase + " " + e.icon;
                    F.fragment.appendChild(s);
                    F.fragment.appendChild(o);
                }
                if (e.subtext) {
                    (i = F.subtext.cloneNode(false)).textContent = e.subtext;
                    n.appendChild(i);
                }
            }
            if (true === t) {
                for (; 0 < n.childNodes.length;) {
                    F.fragment.appendChild(n.childNodes[0]);
                }
            } else {
                F.fragment.appendChild(n);
            }
            return F.fragment;
        };
        var Z = function (e) {
            var t;
            var i;
            var s = F.text.cloneNode(false);
            s.innerHTML = e.label;
            if (e.icon) {
                var n = F.whitespace.cloneNode(false);
                (i = F.span.cloneNode(false)).className = e.iconBase + " " + e.icon;
                F.fragment.appendChild(i);
                F.fragment.appendChild(n);
            }
            if (e.subtext) {
                (t = F.subtext.cloneNode(false)).textContent = e.subtext;
                s.appendChild(t);
            }
            F.fragment.appendChild(s);
            return F.fragment;
        };
        var J = function (e, t) {
            var i = this;
            z.valHooks.select.set = p._set;
            p.useDefault = true;
            this.$element = z(e);
            this.$newElement = null;
            this.$button = null;
            this.$menu = null;
            this.options = t;
            this.selectpicker = {
                main: {},
                current: {},
                search: {},
                view: {},
                keydown: {
                    keyHistory: "",
                    resetKeyHistory: {
                        start: function () {
                            return setTimeout(function () {
                                i.selectpicker.keydown.keyHistory = "";
                            }, 800);
                        }
                    }
                }
            };
            if (null === this.options.title) {
                this.options.title = this.$element.attr("title");
            }
            var s = this.options.windowPadding;
            if ("number" == typeof s) {
                this.options.windowPadding = [s, s, s, s];
            }
            this.val = J.prototype.val;
            this.render = J.prototype.render;
            this.refresh = J.prototype.refresh;
            this.setStyle = J.prototype.setStyle;
            this.selectAll = J.prototype.selectAll;
            this.deselectAll = J.prototype.deselectAll;
            this.destroy = J.prototype.destroy;
            this.remove = J.prototype.remove;
            this.show = J.prototype.show;
            this.hide = J.prototype.hide;
            this.init();
        };
        function Q(e) {
            var r;
            [].shift.apply(arguments);
            try {
                M.full = (z.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split(".");
            } catch (e) {
                if (J.BootstrapVersion) {
                    M.full = J.BootstrapVersion.split(" ")[0].split(".");
                } else {
                    M.full = ["3", "0", "0"];
                    console.warn("There was an issue retrieving Bootstrap's version. Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.", e);
                }
            }
            M.major = M.full[0];
            M.success = true;
            var s = this.each(function () {
                var e = z(this);
                if (e.is("select")) {
                    var t = e.data("selectpicker");
                    var i = "object" == typeof e && e;
                    if (t) {
                        if (i) {
                            for (var s in i) if (i.hasOwnProperty(s)) {
                                t.options[s] = i[s];
                            }
                        }
                    } else {
                        var n = e.data();
                        for (var o in n) if (n.hasOwnProperty(o) && -1 !== z.inArray(o, d)) {
                            delete n[o];
                        }
                        var l = z.extend({}, J.DEFAULTS, z.fn.selectpicker.defaults || {}, n, i);
                        l.template = z.extend({}, J.DEFAULTS.template, z.fn.selectpicker.defaults ? z.fn.selectpicker.defaults.template : {}, n.template, i.template);
                        e.data("selectpicker", t = new J(this, l));
                    }
                    if ("string" == typeof e) {
                        r = t[e] instanceof Function ? t[e].apply(t, arguments) : t.options[e];
                    }
                }
            });
            return undefined !== r ? r : s;
        }
        J.VERSION = "1.13.9";
        J.DEFAULTS = {
            noneSelectedText: "Nothing selected",
            noneResultsText: "No results matched {0}",
            countSelectedText: function (e, t) {
                return 1 == e ? "{0} item selected" : "{0} items selected";
            },
            maxOptionsText: function (e, t) {
                return [1 == e ? "Limit reached ({n} item max)" : "Limit reached ({n} items max)", 1 == t ? "Group limit reached ({n} item max)" : "Group limit reached ({n} items max)"];
            },
            selectAllText: "Select All",
            deselectAllText: "Deselect All",
            doneButton: false,
            doneButtonText: "Close",
            multipleSeparator: ", ",
            styleBase: "btn",
            style: "btn-default",
            size: "auto",
            title: null,
            selectedTextFormat: "values",
            width: false,
            container: false,
            hideDisabled: false,
            showSubtext: false,
            showIcon: true,
            showContent: true,
            dropupAuto: true,
            header: false,
            liveSearch: false,
            liveSearchPlaceholder: null,
            liveSearchNormalize: false,
            liveSearchStyle: "contains",
            actionsBox: false,
            iconBase: "glyphicon",
            tickIcon: "glyphicon-ok",
            showTick: false,
            template: {
                caret: "<span class=\"caret\"></span>"
            },
            maxOptions: false,
            mobile: false,
            selectOnTab: false,
            dropdownAlignRight: false,
            windowPadding: 0,
            virtualScroll: 600,
            display: false,
            sanitize: true,
            sanitizeFn: null,
            whiteList: e
        };
        J.prototype = {
            constructor: J,
            init: function () {
                var i = this;
                var e = this.$element.attr("id");
                this.selectId = R++;
                this.$element[0].classList.add("bs-select-hidden");
                this.multiple = this.$element.prop("multiple");
                this.autofocus = this.$element.prop("autofocus");
                this.options.showTick = this.$element[0].classList.contains("show-tick");
                this.$newElement = this.createDropdown();
                this.$element.after(this.$newElement).prependTo(this.$newElement);
                this.$button = this.$newElement.children("button");
                this.$menu = this.$newElement.children(".dropdown-menu");
                this.$menuInner = this.$menu.children(".inner");
                this.$searchbox = this.$menu.find("input");
                this.$element[0].classList.remove("bs-select-hidden");
                if (true === this.options.dropdownAlignRight) {
                    this.$menu[0].classList.add("dropdown-menu-right");
                }
                if (undefined !== e) {
                    this.$button.attr("data-id", e);
                }
                this.checkDisabled();
                this.clickListener();
                if (this.options.liveSearch) {
                    this.liveSearchListener();
                }
                this.setStyle();
                this.render();
                this.setWidth();
                if (this.options.container) {
                    this.selectPosition();
                } else {
                    this.$element.on("hide.bs.select", function () {
                        if (i.isVirtual()) {
                            var e = i.$menuInner[0];
                            var t = e.firstChild.cloneNode(false);
                            e.replaceChild(t, e.firstChild);
                            e.scrollTop = 0;
                        }
                    });
                }
                this.$menu.data("this", this);
                this.$newElement.data("this", this);
                if (this.options.mobile) {
                    this.mobile();
                }
                this.$newElement.on({
                    "hide.bs.dropdown": function (e) {
                        i.$menuInner.attr("aria-expanded", false);
                        i.$element.trigger("hide.bs.select", e);
                    },
                    "hidden.bs.dropdown": function (e) {
                        i.$element.trigger("hidden.bs.select", e);
                    },
                    "show.bs.dropdown": function (e) {
                        i.$menuInner.attr("aria-expanded", true);
                        i.$element.trigger("show.bs.select", e);
                    },
                    "shown.bs.dropdown": function (e) {
                        i.$element.trigger("shown.bs.select", e);
                    }
                });
                if (i.$element[0].hasAttribute("required")) {
                    this.$element.on("invalid.bs.select", function () {
                        i.$button[0].classList.add("bs-invalid");
                        i.$element.on("shown.bs.select.invalid", function () {
                            i.$element.val(i.$element.val()).off("shown.bs.select.invalid");
                        }).on("rendered.bs.select", function () {
                            if (this.validity.valid) {
                                i.$button[0].classList.remove("bs-invalid");
                            }
                            i.$element.off("rendered.bs.select");
                        });
                        i.$button.on("blur.bs.select", function () {
                            i.$element.trigger("focus").trigger("blur");
                            i.$button.off("blur.bs.select");
                        });
                    });
                }
                setTimeout(function () {
                    i.createLi();
                    i.$element.trigger("loaded.bs.select");
                });
            },
            createDropdown: function () {
                var e = this.multiple || this.options.showTick ? " show-tick" : "";
                var t = "";
                var i = this.autofocus ? " autofocus" : "";
                if (true && this.$element.parent().hasClass("input-group")) {
                    t = " input-group-btn";
                }
                var s;
                var n = "";
                var o = "";
                var l = "";
                var r = "";
                if (this.options.header) {
                    n = "<div class=\"popover-title\"><button type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button>" + this.options.header + "</div>";
                }
                if (this.options.liveSearch) {
                    o = "<div class=\"bs-searchbox\"><input type=\"text\" class=\"form-control\" autocomplete=\"off\"" + (null === this.options.liveSearchPlaceholder ? "" : " placeholder=\"" + O(this.options.liveSearchPlaceholder) + "\"") + " role=\"textbox\" aria-label=\"Search\"></div>";
                }
                if (this.multiple && this.options.actionsBox) {
                    l = "<div class=\"bs-actionsbox\"><div class=\"btn-group btn-group-sm btn-block\"><button type=\"button\" class=\"actions-btn bs-select-all btn btn-default\">" + this.options.selectAllText + "</button><button type=\"button\" class=\"actions-btn bs-deselect-all btn " + "btn-default" + "\">" + this.options.deselectAllText + "</button></div></div>";
                }
                if (this.multiple && this.options.doneButton) {
                    r = "<div class=\"bs-donebutton\"><div class=\"btn-group btn-block\"><button type=\"button\" class=\"btn btn-sm btn-default\">" + this.options.doneButtonText + "</button></div></div>";
                }
                s = "<div class=\"dropdown bootstrap-select" + e + t + "\"><button type=\"button\" class=\"" + this.options.styleBase + " dropdown-toggle\" " + ("static" === this.options.display ? "data-display=\"static\"" : "") + "data-toggle=\"dropdown\"" + i + " role=\"button\"><div class=\"filter-option\"><div class=\"filter-option-inner\"><div class=\"filter-option-inner-inner\"></div></div> </div>" + ("<span class=\"bs-caret\">" + this.options.template.caret + "</span>") + "</button><div class=\"" + "dropdown-menu" + " " + "open" + "\" role=\"combobox\">" + n + o + l + "<div class=\"inner " + "open" + "\" role=\"listbox\" aria-expanded=\"false\" tabindex=\"-1\"><ul class=\"" + "dropdown-menu" + " inner " + "" + "\"></ul></div>" + r + "</div></div>";
                return z(s);
            },
            setPositionData: function () {
                this.selectpicker.view.canHighlight = [];
                for (var e = 0; e < this.selectpicker.current.data.length; e++) {
                    var t = this.selectpicker.current.data[e];
                    var i = true;
                    if ("divider" === t.type) {
                        i = false;
                        t.height = this.sizeInfo.dividerHeight;
                    } else if ("optgroup-label" === t.type) {
                        i = false;
                        t.height = this.sizeInfo.dropdownHeaderHeight;
                    } else {
                        t.height = this.sizeInfo.liHeight;
                    }
                    if (t.disabled) {
                        i = false;
                    }
                    this.selectpicker.view.canHighlight.push(i);
                    t.position = (0 === e ? 0 : this.selectpicker.current.data[e - 1].position) + t.height;
                }
            },
            isVirtual: function () {
                return false !== this.options.virtualScroll && this.selectpicker.main.elements.length >= this.options.virtualScroll || true === this.options.virtualScroll;
            },
            createView: function (T, e) {
                e = e || 0;
                var A = this;
                this.selectpicker.current = T ? this.selectpicker.search : this.selectpicker.main;
                var N;
                var D;
                var H = [];
                function i(e, t) {
                    var i;
                    var s;
                    var n;
                    var o;
                    var l;
                    var r;
                    var a;
                    var c;
                    var d;
                    var h;
                    var p = A.selectpicker.current.elements.length;
                    var u = [];
                    var f = true;
                    var m = A.isVirtual();
                    A.selectpicker.view.scrollTop = e;
                    if (true === m && A.sizeInfo.hasScrollBar && A.$menu[0].offsetWidth > A.sizeInfo.totalMenuWidth) {
                        A.sizeInfo.menuWidth = A.$menu[0].offsetWidth;
                        A.sizeInfo.totalMenuWidth = A.sizeInfo.menuWidth + A.sizeInfo.scrollBarWidth;
                        A.$menu.css("min-width", A.sizeInfo.menuWidth);
                    }
                    i = Math.ceil(A.sizeInfo.menuInnerHeight / A.sizeInfo.liHeight * 1.5);
                    s = Math.round(p / i) || 1;
                    for (var v = 0; v < s; v++) {
                        var g = (v + 1) * i;
                        if (v === s - 1) {
                            g = p;
                        }
                        u[v] = [v * i + (v ? 1 : 0), g];
                        if (!p) {
                            break;
                        }
                        if (undefined === l && e <= A.selectpicker.current.data[g - 1].position - A.sizeInfo.menuInnerHeight) {
                            l = v;
                        }
                    }
                    if (undefined === l) {
                        l = 0;
                    }
                    r = [A.selectpicker.view.position0, A.selectpicker.view.position1];
                    n = Math.max(0, l - 1);
                    o = Math.min(s - 1, l + 1);
                    A.selectpicker.view.position0 = false === m ? 0 : Math.max(0, u[n][0]) || 0;
                    A.selectpicker.view.position1 = false === m ? p : Math.min(p, u[o][1]) || 0;
                    a = r[0] !== A.selectpicker.view.position0 || r[1] !== A.selectpicker.view.position1;
                    if (undefined !== A.activeIndex) {
                        D = A.selectpicker.main.elements[A.prevActiveIndex];
                        H = A.selectpicker.main.elements[A.activeIndex];
                        N = A.selectpicker.main.elements[A.selectedIndex];
                        if (t) {
                            if (A.activeIndex !== A.selectedIndex && H && H.length) {
                                H.classList.remove("active");
                                if (H.firstChild) {
                                    H.firstChild.classList.remove("active");
                                }
                            }
                            A.activeIndex = undefined;
                        }
                        if (A.activeIndex && A.activeIndex !== A.selectedIndex && N && N.length) {
                            N.classList.remove("active");
                            if (N.firstChild) {
                                N.firstChild.classList.remove("active");
                            }
                        }
                    }
                    if (undefined !== A.prevActiveIndex && A.prevActiveIndex !== A.activeIndex && A.prevActiveIndex !== A.selectedIndex && D && D.length) {
                        D.classList.remove("active");
                        if (D.firstChild) {
                            D.firstChild.classList.remove("active");
                        }
                    }
                    if ((t || a) && (c = A.selectpicker.view.visibleElements ? A.selectpicker.view.visibleElements.slice() : [], A.selectpicker.view.visibleElements = false === m ? A.selectpicker.current.elements : A.selectpicker.current.elements.slice(A.selectpicker.view.position0, A.selectpicker.view.position1), A.setOptionStatus(), (T || false === m && t) && (d = c, h = A.selectpicker.view.visibleElements, f = !(d.length === h.length && d.every(function (e, t) {
                        return e === h[t];
                    }))), (t || true === m) && f)) {
                        var b;
                        var w;
                        var x = A.$menuInner[0];
                        var I = document.createDocumentFragment();
                        var k = x.firstChild.cloneNode(false);
                        var $ = A.selectpicker.view.visibleElements;
                        var y = [];
                        x.replaceChild(k, x.firstChild);
                        v = 0;
                        for (var S = $.length; v < S; v++) {
                            var E;
                            var C;
                            var O = $[v];
                            if (A.options.sanitize && (E = O.lastChild) && (C = A.selectpicker.current.data[v + A.selectpicker.view.position0]) && C.content && !C.sanitized) {
                                y.push(E);
                                C.sanitized = true;
                            }
                            I.appendChild(O);
                        }
                        if (A.options.sanitize && y.length) {
                            B(y, A.options.whiteList, A.options.sanitizeFn);
                        }
                        if (true === m) {
                            b = 0 === A.selectpicker.view.position0 ? 0 : A.selectpicker.current.data[A.selectpicker.view.position0 - 1].position;
                            w = A.selectpicker.view.position1 > p - 1 ? 0 : A.selectpicker.current.data[p - 1].position - A.selectpicker.current.data[A.selectpicker.view.position1 - 1].position;
                            x.firstChild.style.marginTop = b + "px";
                            x.firstChild.style.marginBottom = w + "px";
                        }
                        x.firstChild.appendChild(I);
                    }
                    A.prevActiveIndex = A.activeIndex;
                    if (A.options.liveSearch) {
                        if (T && t) {
                            var z;
                            var L = 0;
                            if (!A.selectpicker.view.canHighlight[L]) {
                                L = 1 + A.selectpicker.view.canHighlight.slice(1).indexOf(true);
                            }
                            z = A.selectpicker.view.visibleElements[L];
                            if (A.selectpicker.view.currentActive) {
                                A.selectpicker.view.currentActive.classList.remove("active");
                                if (A.selectpicker.view.currentActive.firstChild) {
                                    A.selectpicker.view.currentActive.firstChild.classList.remove("active");
                                }
                            }
                            if (z) {
                                z.classList.add("active");
                                if (z.firstChild) {
                                    z.firstChild.classList.add("active");
                                }
                            }
                            A.activeIndex = (A.selectpicker.current.data[L] || {}).index;
                        }
                    } else {
                        A.$menuInner.trigger("focus");
                    }
                }
                this.setPositionData();
                i(e, true);
                this.$menuInner.off("scroll.createView").on("scroll.createView", function (e, t) {
                    if (!A.noScroll) {
                        i(this.scrollTop, t);
                    }
                    A.noScroll = false;
                });
                z(window).off("resize.bs.select." + this.selectId + ".createView").on("resize.bs.select." + this.selectId + ".createView", function () {
                    if (A.$newElement.hasClass("open")) {
                        i(A.$menuInner[0].scrollTop);
                    }
                });
            },
            setPlaceholder: function () {
                var e = false;
                if (this.options.title && !this.multiple) {
                    if (!this.selectpicker.view.titleOption) {
                        this.selectpicker.view.titleOption = document.createElement("option");
                    }
                    e = true;
                    var t = this.$element[0];
                    var i = false;
                    var s = !this.selectpicker.view.titleOption.parentNode;
                    if (s) {
                        this.selectpicker.view.titleOption.className = "bs-title-option";
                        this.selectpicker.view.titleOption.value = "";
                        i = undefined === z(t.options[t.selectedIndex]).attr("selected") && undefined === this.$element.data("selected");
                    }
                    if (s || 0 !== this.selectpicker.view.titleOption.index) {
                        t.insertBefore(this.selectpicker.view.titleOption, t.firstChild);
                    }
                    if (i) {
                        t.selectedIndex = 0;
                    }
                }
                return e;
            },
            createLi: function () {
                var a = this;
                var f = this.options.iconBase;
                var m = ":not([hidden]):not([data-hidden=\"true\"])";
                var v = [];
                var g = [];
                var c = 0;
                var b = 0;
                var e = this.setPlaceholder() ? 1 : 0;
                if (this.options.hideDisabled) {
                    m += ":not(:disabled)";
                }
                if (!(!a.options.showTick && !a.multiple || F.checkMark.parentNode)) {
                    F.checkMark.className = f + " " + a.options.tickIcon + " check-mark";
                    F.a.appendChild(F.checkMark);
                }
                var t = this.$element[0].querySelectorAll("select > *" + m);
                function w(e) {
                    var t = g[g.length - 1];
                    if (!(t && "divider" === t.type && (t.optID || e.optID))) {
                        (e = e || {}).type = "divider";
                        v.push(G(false, "divider", e.optID ? e.optID + "div" : undefined));
                        g.push(e);
                    }
                }
                function x(e, t) {
                    (t = t || {}).divider = "true" === e.getAttribute("data-divider");
                    if (t.divider) {
                        w({
                            optID: t.optID
                        });
                    } else {
                        var i = g.length;
                        var s = e.style.cssText;
                        var n = s ? O(s) : "";
                        var o = (e.className || "") + (t.optgroupClass || "");
                        if (t.optID) {
                            o = "opt " + o;
                        }
                        t.text = e.textContent;
                        t.content = e.getAttribute("data-content");
                        t.tokens = e.getAttribute("data-tokens");
                        t.subtext = e.getAttribute("data-subtext");
                        t.icon = e.getAttribute("data-icon");
                        t.iconBase = f;
                        var l = Y(t);
                        v.push(G(K(l, o, n), "", t.optID));
                        e.liIndex = i;
                        t.display = t.content || t.text;
                        t.type = "option";
                        t.index = i;
                        t.option = e;
                        t.disabled = t.disabled || e.disabled;
                        g.push(t);
                        var r = 0;
                        if (t.display) {
                            r += t.display.length;
                        }
                        if (t.subtext) {
                            r += t.subtext.length;
                        }
                        if (t.icon) {
                            r += 1;
                        }
                        if (c < r) {
                            c = r;
                            a.selectpicker.view.widestOption = v[v.length - 1];
                        }
                    }
                }
                function i(e, t) {
                    var i = t[e];
                    var s = t[e - 1];
                    var n = t[e + 1];
                    var o = i.querySelectorAll("option" + m);
                    if (o.length) {
                        var l;
                        var r;
                        var a = {
                            label: O(i.label),
                            subtext: i.getAttribute("data-subtext"),
                            icon: i.getAttribute("data-icon"),
                            iconBase: f
                        };
                        var c = " " + (i.className || "");
                        b++;
                        if (s) {
                            w({
                                optID: b
                            });
                        }
                        var d = Z(a);
                        v.push(G(d, "dropdown-header" + c, b));
                        g.push({
                            display: a.label,
                            subtext: a.subtext,
                            type: "optgroup-label",
                            optID: b
                        });
                        var h = 0;
                        for (var p = o.length; h < p; h++) {
                            var u = o[h];
                            if (0 === h) {
                                r = (l = g.length - 1) + p;
                            }
                            x(u, {
                                headerIndex: l,
                                lastIndex: r,
                                optID: b,
                                optgroupClass: c,
                                disabled: i.disabled
                            });
                        }
                        if (n) {
                            w({
                                optID: b
                            });
                        }
                    }
                }
                for (var s = t.length; e < s; e++) {
                    var n = t[e];
                    if ("OPTGROUP" !== n.tagName) {
                        x(n, {});
                    } else {
                        i(e, t);
                    }
                }
                this.selectpicker.main.elements = v;
                this.selectpicker.main.data = g;
                this.selectpicker.current = this.selectpicker.main;
            },
            findLis: function () {
                return this.$menuInner.find(".inner > li");
            },
            render: function () {
                this.setPlaceholder();
                var e;
                var t;
                var i = this;
                var s = this.$element[0].selectedOptions;
                var n = s.length;
                var o = this.$button[0];
                var l = o.querySelector(".filter-option-inner-inner");
                var r = document.createTextNode(this.options.multipleSeparator);
                var a = F.fragment.cloneNode(false);
                var c = false;
                this.togglePlaceholder();
                this.tabIndex();
                if ("static" === this.options.selectedTextFormat) {
                    a = Y({
                        text: this.options.title
                    }, true);
                } else {
                    if (e = this.multiple && -1 !== this.options.selectedTextFormat.indexOf("count") && 1 < n) {
                        e = 1 < (t = this.options.selectedTextFormat.split(">")).length && n > t[1] || 1 === t.length && 2 <= n;
                    }
                    if (false === e) {
                        for (var d = 0; d < n && d < 50; d++) {
                            var h = s[d];
                            var p = {};
                            var u = {
                                content: h.getAttribute("data-content"),
                                subtext: h.getAttribute("data-subtext"),
                                icon: h.getAttribute("data-icon")
                            };
                            if (this.multiple && 0 < d) {
                                a.appendChild(r.cloneNode(false));
                            }
                            if (h.title) {
                                p.text = h.title;
                            } else if (u.content && i.options.showContent) {
                                p.content = u.content.toString();
                                c = true;
                            } else {
                                if (i.options.showIcon) {
                                    p.icon = u.icon;
                                    p.iconBase = this.options.iconBase;
                                }
                                if (i.options.showSubtext && !i.multiple && u.subtext) {
                                    p.subtext = " " + u.subtext;
                                }
                                p.text = h.textContent.trim();
                            }
                            a.appendChild(Y(p, true));
                        }
                        if (49 < n) {
                            a.appendChild(document.createTextNode("..."));
                        }
                    } else {
                        var f = ":not([hidden]):not([data-hidden=\"true\"]):not([data-divider=\"true\"])";
                        if (this.options.hideDisabled) {
                            f += ":not(:disabled)";
                        }
                        var m = this.$element[0].querySelectorAll("select > option" + f + ", optgroup" + f + " option" + f).length;
                        var v = "function" == typeof this.options.countSelectedText ? this.options.countSelectedText(n, m) : this.options.countSelectedText;
                        a = Y({
                            text: v.replace("{0}", n.toString()).replace("{1}", m.toString())
                        }, true);
                    }
                }
                if (null == this.options.title) {
                    this.options.title = this.$element.attr("title");
                }
                if (!a.childNodes.length) {
                    a = Y({
                        text: undefined !== this.options.title ? this.options.title : this.options.noneSelectedText
                    }, true);
                }
                o.title = a.textContent.replace(/<[^>]*>?/g, "").trim();
                if (this.options.sanitize && c) {
                    B([a], i.options.whiteList, i.options.sanitizeFn);
                }
                l.innerHTML = "";
                l.appendChild(a);
                if (true && this.$newElement[0].classList.contains("bs3-has-addon")) {
                    var g = o.querySelector(".filter-expand");
                    var b = l.cloneNode(true);
                    b.className = "filter-expand";
                    if (g) {
                        o.replaceChild(b, g);
                    } else {
                        o.appendChild(b);
                    }
                }
                this.$element.trigger("rendered.bs.select");
            },
            setStyle: function (e, t) {
                var i;
                var s = this.$button[0];
                var n = this.$newElement[0];
                var o = this.options.style.trim();
                if (this.$element.attr("class")) {
                    this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ""));
                }
                n.classList.add("bs3");
                if (n.parentNode.classList.contains("input-group") && (n.previousElementSibling || n.nextElementSibling) && (n.previousElementSibling || n.nextElementSibling).classList.contains("input-group-addon")) {
                    n.classList.add("bs3-has-addon");
                }
                i = e ? e.trim() : o;
                if ("add" == t) {
                    if (i) {
                        s.classList.add.apply(s.classList, i.split(" "));
                    }
                } else if ("remove" == t) {
                    if (i) {
                        s.classList.remove.apply(s.classList, i.split(" "));
                    }
                } else {
                    if (o) {
                        s.classList.remove.apply(s.classList, o.split(" "));
                    }
                    if (i) {
                        s.classList.add.apply(s.classList, i.split(" "));
                    }
                }
            },
            liHeight: function (e) {
                if (e || false !== this.options.size && !this.sizeInfo) {
                    if (!this.sizeInfo) {
                        this.sizeInfo = {};
                    }
                    var t = document.createElement("div");
                    var i = document.createElement("div");
                    var s = document.createElement("div");
                    var n = document.createElement("ul");
                    var o = document.createElement("li");
                    var l = document.createElement("li");
                    var r = document.createElement("li");
                    var a = document.createElement("a");
                    var c = document.createElement("span");
                    var d = this.options.header && 0 < this.$menu.find(".popover-title").length ? this.$menu.find(".popover-title")[0].cloneNode(true) : null;
                    var h = this.options.liveSearch ? document.createElement("div") : null;
                    var p = this.options.actionsBox && this.multiple && 0 < this.$menu.find(".bs-actionsbox").length ? this.$menu.find(".bs-actionsbox")[0].cloneNode(true) : null;
                    var u = this.options.doneButton && this.multiple && 0 < this.$menu.find(".bs-donebutton").length ? this.$menu.find(".bs-donebutton")[0].cloneNode(true) : null;
                    var f = this.$element.find("option")[0];
                    this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth;
                    c.className = "text";
                    a.className = "dropdown-item " + (f ? f.className : "");
                    t.className = this.$menu[0].parentNode.className + " " + "open";
                    t.style.width = this.sizeInfo.selectWidth + "px";
                    if ("auto" === this.options.width) {
                        i.style.minWidth = 0;
                    }
                    i.className = "dropdown-menu open";
                    s.className = "inner open";
                    n.className = "dropdown-menu inner ";
                    o.className = "divider";
                    l.className = "dropdown-header";
                    c.appendChild(document.createTextNode("​"));
                    a.appendChild(c);
                    r.appendChild(a);
                    l.appendChild(c.cloneNode(true));
                    if (this.selectpicker.view.widestOption) {
                        n.appendChild(this.selectpicker.view.widestOption.cloneNode(true));
                    }
                    n.appendChild(r);
                    n.appendChild(o);
                    n.appendChild(l);
                    if (d) {
                        i.appendChild(d);
                    }
                    if (h) {
                        var m = document.createElement("input");
                        h.className = "bs-searchbox";
                        m.className = "form-control";
                        h.appendChild(m);
                        i.appendChild(h);
                    }
                    if (p) {
                        i.appendChild(p);
                    }
                    s.appendChild(n);
                    i.appendChild(s);
                    if (u) {
                        i.appendChild(u);
                    }
                    t.appendChild(i);
                    document.body.appendChild(t);
                    var v;
                    var g = r.offsetHeight;
                    var b = l ? l.offsetHeight : 0;
                    var w = d ? d.offsetHeight : 0;
                    var x = h ? h.offsetHeight : 0;
                    var I = p ? p.offsetHeight : 0;
                    var k = u ? u.offsetHeight : 0;
                    var $ = z(o).outerHeight(true);
                    var y = !!window.getComputedStyle && window.getComputedStyle(i);
                    var S = i.offsetWidth;
                    var E = y ? null : z(i);
                    var C = {
                        vert: (parseInt(y ? y.paddingTop : E.css("paddingTop"), 10) || 0) + (parseInt(y ? y.paddingBottom : E.css("paddingBottom"), 10) || 0) + (parseInt(y ? y.borderTopWidth : E.css("borderTopWidth"), 10) || 0) + (parseInt(y ? y.borderBottomWidth : E.css("borderBottomWidth"), 10) || 0),
                        horiz: (parseInt(y ? y.paddingLeft : E.css("paddingLeft"), 10) || 0) + (parseInt(y ? y.paddingRight : E.css("paddingRight"), 10) || 0) + (parseInt(y ? y.borderLeftWidth : E.css("borderLeftWidth"), 10) || 0) + (parseInt(y ? y.borderRightWidth : E.css("borderRightWidth"), 10) || 0)
                    };
                    var O = {
                        vert: C.vert + (parseInt(y ? y.marginTop : E.css("marginTop"), 10) || 0) + (parseInt(y ? y.marginBottom : E.css("marginBottom"), 10) || 0) + 2,
                        horiz: C.horiz + (parseInt(y ? y.marginLeft : E.css("marginLeft"), 10) || 0) + (parseInt(y ? y.marginRight : E.css("marginRight"), 10) || 0) + 2
                    };
                    s.style.overflowY = "scroll";
                    v = i.offsetWidth - S;
                    document.body.removeChild(t);
                    this.sizeInfo.liHeight = g;
                    this.sizeInfo.dropdownHeaderHeight = b;
                    this.sizeInfo.headerHeight = w;
                    this.sizeInfo.searchHeight = x;
                    this.sizeInfo.actionsHeight = I;
                    this.sizeInfo.doneButtonHeight = k;
                    this.sizeInfo.dividerHeight = $;
                    this.sizeInfo.menuPadding = C;
                    this.sizeInfo.menuExtras = O;
                    this.sizeInfo.menuWidth = S;
                    this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth;
                    this.sizeInfo.scrollBarWidth = v;
                    this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight;
                    this.setPositionData();
                }
            },
            getSelectPosition: function () {
                var e;
                var t = z(window);
                var i = this.$newElement.offset();
                var s = z(this.options.container);
                if (this.options.container && s.length && !s.is("body")) {
                    (e = s.offset()).top += parseInt(s.css("borderTopWidth"));
                    e.left += parseInt(s.css("borderLeftWidth"));
                } else {
                    e = {
                        top: 0,
                        left: 0
                    };
                }
                var n = this.options.windowPadding;
                this.sizeInfo.selectOffsetTop = i.top - e.top - t.scrollTop();
                this.sizeInfo.selectOffsetBot = t.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - e.top - n[2];
                this.sizeInfo.selectOffsetLeft = i.left - e.left - t.scrollLeft();
                this.sizeInfo.selectOffsetRight = t.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - e.left - n[1];
                this.sizeInfo.selectOffsetTop -= n[0];
                this.sizeInfo.selectOffsetLeft -= n[3];
            },
            setMenuSize: function (e) {
                this.getSelectPosition();
                var t;
                var i;
                var s;
                var n;
                var o;
                var l;
                var r;
                var a = this.sizeInfo.selectWidth;
                var c = this.sizeInfo.liHeight;
                var d = this.sizeInfo.headerHeight;
                var h = this.sizeInfo.searchHeight;
                var p = this.sizeInfo.actionsHeight;
                var u = this.sizeInfo.doneButtonHeight;
                var f = this.sizeInfo.dividerHeight;
                var m = this.sizeInfo.menuPadding;
                var v = 0;
                if (this.options.dropupAuto) {
                    r = c * this.selectpicker.current.elements.length + m.vert;
                    this.$newElement.toggleClass("dropup", this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && r + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot);
                }
                if ("auto" === this.options.size) {
                    n = 3 < this.selectpicker.current.elements.length ? 3 * this.sizeInfo.liHeight + this.sizeInfo.menuExtras.vert - 2 : 0;
                    i = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert;
                    s = n + d + h + p + u;
                    l = Math.max(n - m.vert, 0);
                    if (this.$newElement.hasClass("dropup")) {
                        i = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert;
                    }
                    t = (o = i) - d - h - p - u - m.vert;
                } else if (this.options.size && "auto" != this.options.size && this.selectpicker.current.elements.length > this.options.size) {
                    for (var g = 0; g < this.options.size; g++) {
                        if ("divider" === this.selectpicker.current.data[g].type) {
                            v++;
                        }
                    }
                    t = (i = c * this.options.size + v * f + m.vert) - m.vert;
                    o = i + d + h + p + u;
                    s = l = "";
                }
                if ("auto" === this.options.dropdownAlignRight) {
                    this.$menu.toggleClass("dropdown-menu-right", this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < this.sizeInfo.totalMenuWidth - a);
                }
                this.$menu.css({
                    "max-height": o + "px",
                    overflow: "hidden",
                    "min-height": s + "px"
                });
                this.$menuInner.css({
                    "max-height": t + "px",
                    "overflow-y": "auto",
                    "min-height": l + "px"
                });
                this.sizeInfo.menuInnerHeight = Math.max(t, 1);
                if (this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight) {
                    this.sizeInfo.hasScrollBar = true;
                    this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth;
                    this.$menu.css("min-width", this.sizeInfo.totalMenuWidth);
                }
                if (this.dropdown && this.dropdown._popper) {
                    this.dropdown._popper.update();
                }
            },
            setSize: function (e) {
                this.liHeight(e);
                if (this.options.header) {
                    this.$menu.css("padding-top", 0);
                }
                if (false !== this.options.size) {
                    var t;
                    var i = this;
                    var s = z(window);
                    var n = 0;
                    this.setMenuSize();
                    if (this.options.liveSearch) {
                        this.$searchbox.off("input.setMenuSize propertychange.setMenuSize").on("input.setMenuSize propertychange.setMenuSize", function () {
                            return i.setMenuSize();
                        });
                    }
                    if ("auto" === this.options.size) {
                        s.off("resize.bs.select." + this.selectId + ".setMenuSize scroll" + ".bs.select" + "." + this.selectId + ".setMenuSize").on("resize.bs.select." + this.selectId + ".setMenuSize scroll" + ".bs.select" + "." + this.selectId + ".setMenuSize", function () {
                            return i.setMenuSize();
                        });
                    } else if (this.options.size && "auto" != this.options.size && this.selectpicker.current.elements.length > this.options.size) {
                        s.off("resize.bs.select." + this.selectId + ".setMenuSize scroll" + ".bs.select" + "." + this.selectId + ".setMenuSize");
                    }
                    if (e) {
                        n = this.$menuInner[0].scrollTop;
                    } else if (!i.multiple) {
                        var o = i.$element[0];
                        if ("number" == typeof (t = (o.options[o.selectedIndex] || {}).liIndex) && false !== i.options.size) {
                            n = (n = i.sizeInfo.liHeight * t) - i.sizeInfo.menuInnerHeight / 2 + i.sizeInfo.liHeight / 2;
                        }
                    }
                    i.createView(false, n);
                }
            },
            setWidth: function () {
                var i = this;
                if ("auto" === this.options.width) {
                    requestAnimationFrame(function () {
                        i.$menu.css("min-width", "0");
                        i.$element.on("loaded.bs.select", function () {
                            i.liHeight();
                            i.setMenuSize();
                            var e = i.$newElement.clone().appendTo("body");
                            var t = e.css("width", "auto").children("button").outerWidth();
                            e.remove();
                            i.sizeInfo.selectWidth = Math.max(i.sizeInfo.totalMenuWidth, t);
                            i.$newElement.css("width", i.sizeInfo.selectWidth + "px");
                        });
                    });
                } else if ("fit" === this.options.width) {
                    this.$menu.css("min-width", "");
                    this.$newElement.css("width", "").addClass("fit-width");
                } else if (this.options.width) {
                    this.$menu.css("min-width", "");
                    this.$newElement.css("width", this.options.width);
                } else {
                    this.$menu.css("min-width", "");
                    this.$newElement.css("width", "");
                }
                if (this.$newElement.hasClass("fit-width") && "fit" !== this.options.width) {
                    this.$newElement[0].classList.remove("fit-width");
                }
            },
            selectPosition: function () {
                this.$bsContainer = z("<div class=\"bs-container\" />");
                var s;
                var n;
                var o;
                var l = this;
                var r = z(this.options.container);
                var e = function (e) {
                    var t = {};
                    var i = l.options.display || !!z.fn.dropdown.Constructor.Default && z.fn.dropdown.Constructor.Default.display;
                    l.$bsContainer.addClass(e.attr("class").replace(/form-control|fit-width/gi, "")).toggleClass("dropup", e.hasClass("dropup"));
                    s = e.offset();
                    if (r.is("body")) {
                        n = {
                            top: 0,
                            left: 0
                        };
                    } else {
                        (n = r.offset()).top += parseInt(r.css("borderTopWidth")) - r.scrollTop();
                        n.left += parseInt(r.css("borderLeftWidth")) - r.scrollLeft();
                    }
                    o = e.hasClass("dropup") ? 0 : e[0].offsetHeight;
                    if (true || "static" === i) {
                        t.top = s.top - n.top + o;
                        t.left = s.left - n.left;
                    }
                    t.width = e[0].offsetWidth;
                    l.$bsContainer.css(t);
                };
                this.$button.on("click.bs.dropdown.data-api", function () {
                    if (!l.isDisabled()) {
                        e(l.$newElement);
                        l.$bsContainer.appendTo(l.options.container).toggleClass("open", !l.$button.hasClass("open")).append(l.$menu);
                    }
                });
                z(window).off("resize.bs.select." + this.selectId + " scroll" + ".bs.select" + "." + this.selectId).on("resize.bs.select." + this.selectId + " scroll" + ".bs.select" + "." + this.selectId, function () {
                    if (l.$newElement.hasClass("open")) {
                        e(l.$newElement);
                    }
                });
                this.$element.on("hide.bs.select", function () {
                    l.$menu.data("height", l.$menu.height());
                    l.$bsContainer.detach();
                });
            },
            setOptionStatus: function () {
                var e = this;
                e.noScroll = false;
                if (e.selectpicker.view.visibleElements && e.selectpicker.view.visibleElements.length) {
                    for (var t = 0; t < e.selectpicker.view.visibleElements.length; t++) {
                        var i = e.selectpicker.current.data[t + e.selectpicker.view.position0];
                        var s = i.option;
                        if (s) {
                            e.setDisabled(i.index, i.disabled);
                            e.setSelected(i.index, s.selected);
                        }
                    }
                }
            },
            setSelected: function (e, t) {
                var i;
                var s;
                var n = this.selectpicker.main.elements[e];
                var o = this.selectpicker.main.data[e];
                var l = undefined !== this.activeIndex;
                var r = this.activeIndex === e || t && !this.multiple && !l;
                o.selected = t;
                s = n.firstChild;
                if (t) {
                    this.selectedIndex = e;
                }
                n.classList.toggle("selected", t);
                n.classList.toggle("active", r);
                if (r) {
                    this.selectpicker.view.currentActive = n;
                    this.activeIndex = e;
                }
                if (s) {
                    s.classList.toggle("selected", t);
                    s.classList.toggle("active", r);
                    s.setAttribute("aria-selected", t);
                }
                if (!r) {
                    if (!l && t && undefined !== this.prevActiveIndex) {
                        (i = this.selectpicker.main.elements[this.prevActiveIndex]).classList.remove("active");
                        if (i.firstChild) {
                            i.firstChild.classList.remove("active");
                        }
                    }
                }
            },
            setDisabled: function (e, t) {
                var i;
                var s = this.selectpicker.main.elements[e];
                this.selectpicker.main.data[e].disabled = t;
                i = s.firstChild;
                s.classList.toggle("disabled", t);
                if (i) {
                    i.setAttribute("aria-disabled", t);
                    if (t) {
                        i.setAttribute("tabindex", -1);
                    } else {
                        i.setAttribute("tabindex", 0);
                    }
                }
            },
            isDisabled: function () {
                return this.$element[0].disabled;
            },
            checkDisabled: function () {
                var e = this;
                if (this.isDisabled()) {
                    this.$newElement[0].classList.add("disabled");
                    this.$button.addClass("disabled").attr("tabindex", -1).attr("aria-disabled", true);
                } else {
                    if (this.$button[0].classList.contains("disabled")) {
                        this.$newElement[0].classList.remove("disabled");
                        this.$button.removeClass("disabled").attr("aria-disabled", false);
                    }
                    if (!(-1 != this.$button.attr("tabindex") || this.$element.data("tabindex"))) {
                        this.$button.removeAttr("tabindex");
                    }
                }
                this.$button.on("click", function () {
                    return !e.isDisabled();
                });
            },
            togglePlaceholder: function () {
                var e = this.$element[0];
                var t = e.selectedIndex;
                var i = -1 === t;
                if (!(i || e.options[t].value)) {
                    i = true;
                }
                this.$button.toggleClass("bs-placeholder", i);
            },
            tabIndex: function () {
                if (this.$element.data("tabindex") !== this.$element.attr("tabindex") && -98 !== this.$element.attr("tabindex") && "-98" !== this.$element.attr("tabindex")) {
                    this.$element.data("tabindex", this.$element.attr("tabindex"));
                    this.$button.attr("tabindex", this.$element.data("tabindex"));
                }
                this.$element.attr("tabindex", -98);
            },
            clickListener: function () {
                var S = this;
                var t = z(document);
                function e() {
                    if (S.options.liveSearch) {
                        S.$searchbox.trigger("focus");
                    } else {
                        S.$menuInner.trigger("focus");
                    }
                }
                function i() {
                    if (S.dropdown && S.dropdown._popper && S.dropdown._popper.state.isCreated) {
                        e();
                    } else {
                        requestAnimationFrame(i);
                    }
                }
                t.data("spaceSelect", false);
                this.$button.on("keyup", function (e) {
                    if (/(32)/.test(e.keyCode.toString(10)) && t.data("spaceSelect")) {
                        e.preventDefault();
                        t.data("spaceSelect", false);
                    }
                });
                this.$newElement.on("show.bs.dropdown", function () {
                    if (false && !S.dropdown) {
                        S.dropdown = S.$button.data("bs.dropdown");
                        S.dropdown._menu = S.$menu[0];
                    }
                });
                this.$button.on("click.bs.dropdown.data-api", function () {
                    if (!S.$newElement.hasClass("open")) {
                        S.setSize();
                    }
                });
                this.$element.on("shown.bs.select", function () {
                    if (S.$menuInner[0].scrollTop !== S.selectpicker.view.scrollTop) {
                        S.$menuInner[0].scrollTop = S.selectpicker.view.scrollTop;
                    }
                    e();
                });
                this.$menuInner.on("click", "li a", function (e, t) {
                    var i = z(this);
                    var s = S.isVirtual() ? S.selectpicker.view.position0 : 0;
                    var n = S.selectpicker.current.data[i.parent().index() + s];
                    var o = n.index;
                    var l = E(S.$element[0]);
                    var r = S.$element.prop("selectedIndex");
                    var a = true;
                    if (S.multiple && 1 !== S.options.maxOptions) {
                        e.stopPropagation();
                    }
                    e.preventDefault();
                    if (!S.isDisabled() && !i.parent().hasClass("disabled")) {
                        var c = S.$element.find("option");
                        var d = n.option;
                        var h = z(d);
                        var p = d.selected;
                        var u = h.parent("optgroup");
                        var f = u.find("option");
                        var m = S.options.maxOptions;
                        var v = u.data("maxOptions") || false;
                        if (o === S.activeIndex) {
                            t = true;
                        }
                        if (!t) {
                            S.prevActiveIndex = S.activeIndex;
                            S.activeIndex = undefined;
                        }
                        if (S.multiple) {
                            d.selected = !p;
                            S.setSelected(o, !p);
                            i.trigger("blur");
                            if (false !== m || false !== v) {
                                var g = m < c.filter(":selected").length;
                                var b = v < u.find("option:selected").length;
                                if (m && g || v && b) {
                                    if (m && 1 == m) {
                                        c.prop("selected", false);
                                        h.prop("selected", true);
                                        for (var w = 0; w < c.length; w++) {
                                            S.setSelected(w, false);
                                        }
                                        S.setSelected(o, true);
                                    } else if (v && 1 == v) {
                                        u.find("option:selected").prop("selected", false);
                                        h.prop("selected", true);
                                        for (w = 0; w < f.length; w++) {
                                            d = f[w];
                                            S.setSelected(c.index(d), false);
                                        }
                                        S.setSelected(o, true);
                                    } else {
                                        var x = "string" == typeof S.options.maxOptionsText ? [S.options.maxOptionsText, S.options.maxOptionsText] : S.options.maxOptionsText;
                                        var I = "function" == typeof x ? x(m, v) : x;
                                        var k = I[0].replace("{n}", m);
                                        var $ = I[1].replace("{n}", v);
                                        var y = z("<div class=\"notify\"></div>");
                                        if (I[2]) {
                                            k = k.replace("{var}", I[2][1 < m ? 0 : 1]);
                                            $ = $.replace("{var}", I[2][1 < v ? 0 : 1]);
                                        }
                                        h.prop("selected", false);
                                        S.$menu.append(y);
                                        if (m && g) {
                                            y.append(z("<div>" + k + "</div>"));
                                            a = false;
                                            S.$element.trigger("maxReached.bs.select");
                                        }
                                        if (v && b) {
                                            y.append(z("<div>" + $ + "</div>"));
                                            a = false;
                                            S.$element.trigger("maxReachedGrp.bs.select");
                                        }
                                        setTimeout(function () {
                                            S.setSelected(o, false);
                                        }, 10);
                                        y.delay(750).fadeOut(300, function () {
                                            z(this).remove();
                                        });
                                    }
                                }
                            }
                        } else {
                            c.prop("selected", false);
                            d.selected = true;
                            S.setSelected(o, true);
                        }
                        if (!S.multiple || S.multiple && 1 === S.options.maxOptions) {
                            S.$button.trigger("focus");
                        } else if (S.options.liveSearch) {
                            S.$searchbox.trigger("focus");
                        }
                        if (a && (l != E(S.$element[0]) && S.multiple || r != S.$element.prop("selectedIndex") && !S.multiple)) {
                            C = [d.index, h.prop("selected"), l];
                            S.$element.triggerNative("change");
                        }
                    }
                });
                this.$menu.on("click", "li.disabled a, .popover-title, .popover-title :not(.close)", function (e) {
                    if (e.currentTarget == this) {
                        e.preventDefault();
                        e.stopPropagation();
                        if (S.options.liveSearch && !z(e.target).hasClass("close")) {
                            S.$searchbox.trigger("focus");
                        } else {
                            S.$button.trigger("focus");
                        }
                    }
                });
                this.$menuInner.on("click", ".divider, .dropdown-header", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (S.options.liveSearch) {
                        S.$searchbox.trigger("focus");
                    } else {
                        S.$button.trigger("focus");
                    }
                });
                this.$menu.on("click", ".popover-title .close", function () {
                    S.$button.trigger("click");
                });
                this.$searchbox.on("click", function (e) {
                    e.stopPropagation();
                });
                this.$menu.on("click", ".actions-btn", function (e) {
                    if (S.options.liveSearch) {
                        S.$searchbox.trigger("focus");
                    } else {
                        S.$button.trigger("focus");
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    if (z(this).hasClass("bs-select-all")) {
                        S.selectAll();
                    } else {
                        S.deselectAll();
                    }
                });
                this.$element.on("change.bs.select", function () {
                    S.render();
                    S.$element.trigger("changed.bs.select", C);
                    C = null;
                }).on("focus.bs.select", function () {
                    if (!S.options.mobile) {
                        S.$button.trigger("focus");
                    }
                });
            },
            liveSearchListener: function () {
                var u = this;
                var f = document.createElement("li");
                this.$button.on("click.bs.dropdown.data-api", function () {
                    if (u.$searchbox.val()) {
                        u.$searchbox.val("");
                    }
                });
                this.$searchbox.on("click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api", function (e) {
                    e.stopPropagation();
                });
                this.$searchbox.on("input propertychange", function () {
                    var e = u.$searchbox.val();
                    u.selectpicker.search.elements = [];
                    u.selectpicker.search.data = [];
                    if (e) {
                        var t = [];
                        var i = e.toUpperCase();
                        var s = {};
                        var n = [];
                        var o = u._searchStyle();
                        var l = u.options.liveSearchNormalize;
                        if (l) {
                            i = w(i);
                        }
                        u._$lisSelected = u.$menuInner.find(".selected");
                        for (var r = 0; r < u.selectpicker.main.data.length; r++) {
                            var a = u.selectpicker.main.data[r];
                            if (!s[r]) {
                                s[r] = $(a, i, o, l);
                            }
                            if (s[r] && undefined !== a.headerIndex && -1 === n.indexOf(a.headerIndex)) {
                                if (0 < a.headerIndex) {
                                    s[a.headerIndex - 1] = true;
                                    n.push(a.headerIndex - 1);
                                }
                                s[a.headerIndex] = true;
                                n.push(a.headerIndex);
                                s[a.lastIndex + 1] = true;
                            }
                            if (s[r] && "optgroup-label" !== a.type) {
                                n.push(r);
                            }
                        }
                        r = 0;
                        for (var c = n.length; r < c; r++) {
                            var d = n[r];
                            var h = n[r - 1];
                            a = u.selectpicker.main.data[d];
                            var p = u.selectpicker.main.data[h];
                            if ("divider" !== a.type || "divider" === a.type && p && "divider" !== p.type && c - 1 !== r) {
                                u.selectpicker.search.data.push(a);
                                t.push(u.selectpicker.main.elements[d]);
                            }
                        }
                        u.activeIndex = undefined;
                        u.noScroll = true;
                        u.$menuInner.scrollTop(0);
                        u.selectpicker.search.elements = t;
                        u.createView(true);
                        if (!t.length) {
                            f.className = "no-results";
                            f.innerHTML = u.options.noneResultsText.replace("{0}", "\"" + O(e) + "\"");
                            u.$menuInner[0].firstChild.appendChild(f);
                        }
                    } else {
                        u.$menuInner.scrollTop(0);
                        u.createView(false);
                    }
                });
            },
            _searchStyle: function () {
                return this.options.liveSearchStyle || "contains";
            },
            val: function (e) {
                if (undefined === e) {
                    return this.$element.val();
                }
                var t = E(this.$element[0]);
                C = [null, null, t];
                this.$element.val(e).trigger("changed.bs.select", C);
                this.render();
                C = null;
                return this.$element;
            },
            changeAll: function (e) {
                if (this.multiple) {
                    if (undefined === e) {
                        e = true;
                    }
                    var t = this.$element[0];
                    var i = 0;
                    var s = 0;
                    var n = E(t);
                    t.classList.add("bs-select-hidden");
                    var o = 0;
                    for (var l = this.selectpicker.current.elements.length; o < l; o++) {
                        var r = this.selectpicker.current.data[o];
                        var a = r.option;
                        if (a && !r.disabled && "divider" !== r.type) {
                            if (r.selected) {
                                i++;
                            }
                            if (a.selected = e) {
                                s++;
                            }
                        }
                    }
                    t.classList.remove("bs-select-hidden");
                    if (i !== s) {
                        this.setOptionStatus();
                        this.togglePlaceholder();
                        C = [null, null, n];
                        this.$element.triggerNative("change");
                    }
                }
            },
            selectAll: function () {
                return this.changeAll(true);
            },
            deselectAll: function () {
                return this.changeAll(false);
            },
            toggle: function (e) {
                if (e = e || window.event) {
                    e.stopPropagation();
                }
                this.$button.trigger("click.bs.dropdown.data-api");
            },
            keydown: function (e) {
                var t;
                var i;
                var s;
                var n;
                var o;
                var l = z(this);
                var r = l.hasClass("dropdown-toggle");
                var a = (r ? l.closest(".dropdown") : l.closest(".dropdown-menu")).data("this");
                var c = a.findLis();
                var d = false;
                var h = e.which === 9 && !r && !a.options.selectOnTab;
                var p = _.test(e.which) || h;
                var u = a.$menuInner[0].scrollTop;
                var f = a.isVirtual();
                var m = true === f ? a.selectpicker.view.position0 : 0;
                if (!(i = a.$newElement.hasClass("open")) && (p || 48 <= e.which && e.which <= 57 || 96 <= e.which && e.which <= 105 || 65 <= e.which && e.which <= 90) && (a.$button.trigger("click.bs.dropdown.data-api"), a.options.liveSearch)) {
                    a.$searchbox.trigger("focus");
                } else {
                    if (e.which === 27 && i) {
                        e.preventDefault();
                        a.$button.trigger("click.bs.dropdown.data-api").trigger("focus");
                    }
                    if (p) {
                        if (!c.length) {
                            return;
                        }
                        if (undefined === (t = true === f ? c.index(c.filter(".active")) : a.activeIndex)) {
                            t = -1;
                        }
                        if (-1 !== t) {
                            (s = a.selectpicker.current.elements[t + m]).classList.remove("active");
                            if (s.firstChild) {
                                s.firstChild.classList.remove("active");
                            }
                        }
                        if (e.which === 38) {
                            if (-1 !== t) {
                                t--;
                            }
                            if (t + m < 0) {
                                t += c.length;
                            }
                            if (!a.selectpicker.view.canHighlight[t + m]) {
                                if (-1 === (t = a.selectpicker.view.canHighlight.slice(0, t + m).lastIndexOf(true) - m)) {
                                    t = c.length - 1;
                                }
                            }
                        } else if (e.which === 40 || h) {
                            if (++t + m >= a.selectpicker.view.canHighlight.length) {
                                t = 0;
                            }
                            if (!a.selectpicker.view.canHighlight[t + m]) {
                                t = t + 1 + a.selectpicker.view.canHighlight.slice(t + m + 1).indexOf(true);
                            }
                        }
                        e.preventDefault();
                        var v = m + t;
                        if (e.which === 38) {
                            if (0 === m && t === c.length - 1) {
                                a.$menuInner[0].scrollTop = a.$menuInner[0].scrollHeight;
                                v = a.selectpicker.current.elements.length - 1;
                            } else {
                                d = (o = (n = a.selectpicker.current.data[v]).position - n.height) < u;
                            }
                        } else if (e.which === 40 || h) {
                            if (0 === t) {
                                v = a.$menuInner[0].scrollTop = 0;
                            } else {
                                d = u < (o = (n = a.selectpicker.current.data[v]).position - a.sizeInfo.menuInnerHeight);
                            }
                        }
                        if (s = a.selectpicker.current.elements[v]) {
                            s.classList.add("active");
                            if (s.firstChild) {
                                s.firstChild.classList.add("active");
                            }
                        }
                        a.activeIndex = a.selectpicker.current.data[v].index;
                        a.selectpicker.view.currentActive = s;
                        if (d) {
                            a.$menuInner[0].scrollTop = o;
                        }
                        if (a.options.liveSearch) {
                            a.$searchbox.trigger("focus");
                        } else {
                            l.trigger("focus");
                        }
                    } else if (!l.is("input") && !q.test(e.which) || e.which === 32 && a.selectpicker.keydown.keyHistory) {
                        var g;
                        var b;
                        var w = [];
                        e.preventDefault();
                        a.selectpicker.keydown.keyHistory += T[e.which];
                        if (a.selectpicker.keydown.resetKeyHistory.cancel) {
                            clearTimeout(a.selectpicker.keydown.resetKeyHistory.cancel);
                        }
                        a.selectpicker.keydown.resetKeyHistory.cancel = a.selectpicker.keydown.resetKeyHistory.start();
                        b = a.selectpicker.keydown.keyHistory;
                        if (/^(.)\1+$/.test(b)) {
                            b = b.charAt(0);
                        }
                        for (var x = 0; x < a.selectpicker.current.data.length; x++) {
                            var I = a.selectpicker.current.data[x];
                            if ($(I, b, "startsWith", true) && a.selectpicker.view.canHighlight[x]) {
                                w.push(I.index);
                            }
                        }
                        if (w.length) {
                            var k = 0;
                            c.removeClass("active").find("a").removeClass("active");
                            if (1 === b.length) {
                                if (-1 === (k = w.indexOf(a.activeIndex)) || k === w.length - 1) {
                                    k = 0;
                                } else {
                                    k++;
                                }
                            }
                            g = w[k];
                            d = 0 < u - (n = a.selectpicker.main.data[g]).position ? (o = n.position - n.height, true) : (o = n.position - a.sizeInfo.menuInnerHeight, n.position > u + a.sizeInfo.menuInnerHeight);
                            (s = a.selectpicker.main.elements[g]).classList.add("active");
                            if (s.firstChild) {
                                s.firstChild.classList.add("active");
                            }
                            a.activeIndex = w[k];
                            s.firstChild.focus();
                            if (d) {
                                a.$menuInner[0].scrollTop = o;
                            }
                            l.trigger("focus");
                        }
                    }
                    if (i && (e.which === 32 && !a.selectpicker.keydown.keyHistory || e.which === 13 || e.which === 9 && a.options.selectOnTab)) {
                        if (e.which !== 32) {
                            e.preventDefault();
                        }
                        if (!(a.options.liveSearch && e.which === 32)) {
                            a.$menuInner.find(".active a").trigger("click", true);
                            l.trigger("focus");
                            if (!a.options.liveSearch) {
                                e.preventDefault();
                                z(document).data("spaceSelect", true);
                            }
                        }
                    }
                }
            },
            mobile: function () {
                this.$element[0].classList.add("mobile-device");
            },
            refresh: function () {
                var e = z.extend({}, this.options, this.$element.data());
                this.options = e;
                this.checkDisabled();
                this.setStyle();
                this.render();
                this.createLi();
                this.setWidth();
                this.setSize(true);
                this.$element.trigger("refreshed.bs.select");
            },
            hide: function () {
                this.$newElement.hide();
            },
            show: function () {
                this.$newElement.show();
            },
            remove: function () {
                this.$newElement.remove();
                this.$element.remove();
            },
            destroy: function () {
                this.$newElement.before(this.$element).remove();
                if (this.$bsContainer) {
                    this.$bsContainer.remove();
                } else {
                    this.$menu.remove();
                }
                this.$element.off(".bs.select").removeData("selectpicker").removeClass("bs-select-hidden selectpicker");
                z(window).off(".bs.select." + this.selectId);
            }
        };
        var X = z.fn.selectpicker;
        z.fn.selectpicker = Q;
        z.fn.selectpicker.Constructor = J;
        z.fn.selectpicker.noConflict = function () {
            z.fn.selectpicker = X;
            return this;
        };
        z(document).off("keydown.bs.dropdown.data-api").on("keydown.bs.select", ".bootstrap-select [data-toggle=\"dropdown\"], .bootstrap-select [role=\"listbox\"], .bootstrap-select .bs-searchbox input", J.prototype.keydown).on("focusin.modal", ".bootstrap-select [data-toggle=\"dropdown\"], .bootstrap-select [role=\"listbox\"], .bootstrap-select .bs-searchbox input", function (e) {
            e.stopPropagation();
        });
        z(window).on("load.bs.select.data-api", function () {
            z(".selectpicker").each(function () {
                var e = z(this);
                Q.call(e, e.data());
            });
        });
    }(e);
});//# sourceMappingURL=bootstrap-select.min.js.map